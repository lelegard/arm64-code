//----------------------------------------------------------------------------
//
// Arm64 CPU system registers tools
// Copyright (c) 2023, Thierry Lelegard
// BSD-2-Clause license, see the LICENSE file.
//
// Comparative results on SHA-1 (portable vs. Arm64 instructions).
// Must be identical...
//
//----------------------------------------------------------------------------

#include "SHA1.h"
#include <ios>
#include <iomanip>
#include <iostream>

struct TestData {
    size_t size;
    uint8_t data[512];
    uint8_t hash[SHA1::HASH_SIZE];
};

static const TestData test_data[] = {
    {
        1,
        {0xCE},
        {0x82, 0xBB, 0x3E, 0xAB, 0x86, 0xD4, 0x06, 0x3E, 0xA4, 0xA3, 0xCB, 0x97, 0x82, 0x1F, 0xEB, 0x07, 0xCE, 0xCF, 0x7B, 0x72}
    },
    {
        12,
        {0xBD, 0xF5, 0x5B, 0xE2, 0x58, 0xCD, 0xAA, 0x0A, 0xC7, 0xEC, 0x5A, 0xB2},
        {0x27, 0x08, 0xF9, 0xB0, 0x4B, 0x4A, 0xF1, 0x3A, 0x94, 0x7C, 0xD6, 0xF1, 0x6A, 0x4F, 0xF8, 0x74, 0x63, 0x6B, 0xE9, 0xE5}
    },
    {
        257,
        {0x91, 0xB2, 0x20, 0x23, 0xC7, 0xFF, 0x1B, 0xEC, 0xD6, 0xA8, 0x29, 0xD5, 0x98, 0x7D, 0x6F, 0x8C,
         0xDA, 0x9F, 0x25, 0x2E, 0xFA, 0xD7, 0xE2, 0x34, 0x42, 0xDE, 0xA0, 0x4B, 0x7F, 0x4A, 0x24, 0xB1,
         0x52, 0x69, 0xB2, 0x8B, 0x7F, 0xF2, 0x53, 0x3E, 0x64, 0x3F, 0x8E, 0xAA, 0x11, 0xE5, 0xDC, 0x54,
         0xE2, 0xC3, 0xFA, 0xD0, 0x73, 0x9A, 0xBC, 0x20, 0x63, 0xC3, 0x31, 0xCE, 0x08, 0x10, 0x30, 0xD9,
         0x7F, 0xC9, 0x40, 0x20, 0x46, 0x66, 0xC8, 0x6A, 0x0C, 0x38, 0xFF, 0xC6, 0xBF, 0x19, 0xA0, 0x01,
         0x06, 0x0A, 0x19, 0xE5, 0x36, 0x8F, 0x9E, 0x7F, 0x32, 0x25, 0x8F, 0x6B, 0xDA, 0x66, 0x50, 0x97,
         0xD5, 0x84, 0xE2, 0x05, 0xBC, 0x1C, 0x70, 0x85, 0x6E, 0xC7, 0x39, 0xE2, 0xF7, 0x70, 0x07, 0x65,
         0xE3, 0x3C, 0x85, 0x05, 0x82, 0x31, 0x30, 0x90, 0x8A, 0x16, 0xDF, 0xD8, 0xBB, 0x63, 0x96, 0x1E,
         0x3B, 0x38, 0x43, 0x9C, 0x6A, 0xB3, 0xEE, 0x4C, 0xB8, 0xB6, 0x44, 0xAC, 0x59, 0xE6, 0x1C, 0xEC,
         0xEE, 0x9A, 0xCF, 0x4F, 0xCD, 0xEA, 0x87, 0xBF, 0xB7, 0x7D, 0x5D, 0xF3, 0xC8, 0x5F, 0xD3, 0x1F,
         0xBC, 0xF2, 0xF7, 0xA1, 0x0B, 0x83, 0x01, 0xFB, 0xC6, 0x6F, 0x0D, 0x64, 0xDB, 0x34, 0xA4, 0xB3,
         0xD6, 0x76, 0x2B, 0x54, 0xC5, 0xBB, 0x62, 0xCB, 0x48, 0x21, 0x6C, 0x0F, 0x35, 0x9E, 0x28, 0x8F,
         0xB5, 0xD9, 0xC8, 0x98, 0x4F, 0xA9, 0xE2, 0xC8, 0x10, 0xD8, 0x5E, 0x04, 0xD5, 0x7B, 0x4E, 0x89,
         0xB7, 0xE8, 0x1E, 0xB4, 0x53, 0xA3, 0x25, 0xC0, 0x5C, 0x12, 0xD1, 0xAC, 0xA0, 0x25, 0xCF, 0x63,
         0xE5, 0xB6, 0xEF, 0x8F, 0x99, 0x00, 0x5D, 0xEB, 0x22, 0xBA, 0x06, 0x46, 0x90, 0x1C, 0x60, 0x8F,
         0x9C, 0x86, 0xE3, 0x0B, 0x92, 0xDF, 0xC5, 0xFD, 0x97, 0x58, 0x92, 0x5B, 0x14, 0xB1, 0xBE, 0x9B,
         0x64},
        {0x93, 0x4F, 0x1E, 0xE2, 0x27, 0xBE, 0x55, 0xBC, 0xD9, 0xBF, 0x73, 0xFB, 0xED, 0x66, 0x8A, 0xAE, 0xEE, 0x89, 0x38, 0x93}
    },
    {0, {}, {}}
};


//----------------------------------------------------------------------------
// Program entry point.
//----------------------------------------------------------------------------

int main(int argc, char* argv[])
{
    SHA1 sha;
    uint8_t hash[SHA1::HASH_SIZE];

    for (auto test = test_data; test->size > 0; ++test) {
        sha.init();
        sha.add(test->data, test->size);
        sha.getHash(hash, sizeof(hash));
        const bool ok = ::memcmp(hash, test->hash, sizeof(hash)) == 0;
        std::cout << test->size << " bytes, SHA1: " << (ok ? "passed" : "failed") << std::endl;
    }

    return EXIT_SUCCESS;
}
