//----------------------------------------------------------------------------
//
// Arm64 CPU system registers tools
// Copyright (c) 2023, Thierry Lelegard
// BSD-2-Clause license, see the LICENSE file.
//
// Comparative results on AES (portable vs. Arm64 instructions).
// Must be identical...
//
//----------------------------------------------------------------------------

#include "AES.h"
#include "ArmAES.h"
#include <ios>
#include <iomanip>
#include <iostream>
#include <arm_neon.h>

struct TestData {
    size_t  key_size;
    uint8_t key[32];
    uint8_t plain[16];
    uint8_t cipher[16];
};

static const TestData test_data[] = {
    {
        16,
        {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
         0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F},
        {0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77,
         0x88, 0x99, 0xAA, 0xBB, 0xCC, 0xDD, 0xEE, 0xFF},
        {0x69, 0xC4, 0xE0, 0xD8, 0x6A, 0x7B, 0x04, 0x30,
         0xD8, 0xCD, 0xB7, 0x80, 0x70, 0xB4, 0xC5, 0x5A},
    },
    {
        16,
        {0xEC, 0xC4, 0xBD, 0x51, 0x4D, 0x54, 0x53, 0xA9,
         0x02, 0x9A, 0xE3, 0xD2, 0xEA, 0x4A, 0x9E, 0xF4},
        {0x33, 0xDB, 0xF0, 0x87, 0x79, 0xC4, 0xE7, 0x4B,
         0x3E, 0x96, 0x1C, 0x7A, 0x0C, 0x4B, 0x33, 0x0B},
        {0x20, 0x3B, 0x27, 0x41, 0xC9, 0x3D, 0x1B, 0x43,
         0x7C, 0xA9, 0xBC, 0xF9, 0x51, 0xC6, 0xC9, 0xA5},
    },
    {
        24,
        {0xB7, 0x66, 0xE6, 0xFA, 0xD9, 0x5D, 0xC3, 0x7E,
         0xBB, 0x16, 0xE3, 0xB0, 0x47, 0x07, 0xAB, 0xE3,
         0xD6, 0x97, 0xC3, 0xAC, 0xB6, 0xA4, 0x47, 0x9F},
        {0xEC, 0xF6, 0x24, 0x8B, 0x58, 0x34, 0x75, 0xF5,
         0x70, 0xFF, 0x38, 0x69, 0x07, 0x01, 0x63, 0x6D},
        {0x13, 0x84, 0x77, 0x7D, 0x26, 0x84, 0xC9, 0x5A,
         0xC4, 0x79, 0x33, 0xC1, 0xD4, 0x30, 0x9F, 0x9D},
    },
    {
        24,
        {0x2B, 0x8C, 0xEA, 0x32, 0xB7, 0x80, 0xBE, 0xD1,
         0x90, 0x5E, 0xDA, 0x93, 0xF9, 0xB9, 0x53, 0xAA,
         0x06, 0xA8, 0x35, 0x88, 0x29, 0x23, 0x12, 0xA3},
        {0x5A, 0x90, 0xE8, 0x12, 0x82, 0x1C, 0x2F, 0x7F,
         0x3A, 0x4E, 0x73, 0x7F, 0x0B, 0xBD, 0x69, 0x41},
        {0x02, 0x16, 0x5E, 0x82, 0xC7, 0x78, 0xAC, 0x12,
         0x8C, 0xA4, 0xF7, 0xF8, 0x43, 0xC6, 0xF8, 0x41},
    },
    {
        32,
        {0xDF, 0xC2, 0xA9, 0xBF, 0x6E, 0xC3, 0xB2, 0xAA,
         0x6A, 0x08, 0x78, 0x56, 0xBA, 0x3B, 0xB8, 0x4E,
         0x6F, 0x01, 0xAE, 0x27, 0x43, 0xB9, 0x27, 0x1C,
         0x5F, 0xCF, 0x35, 0x75, 0xFD, 0xD3, 0xD2, 0x7C},
        {0xB5, 0x79, 0x2B, 0xD8, 0x59, 0x6A, 0x4A, 0x52,
         0xD1, 0x8E, 0xA7, 0xF7, 0x85, 0x68, 0xCA, 0xD6},
        {0x16, 0x04, 0x04, 0x52, 0xA2, 0x8D, 0x07, 0xDF,
         0x43, 0xBC, 0x93, 0x81, 0xB5, 0x38, 0xC2, 0x8B},
    },
    {
        32,
        {0x0D, 0x43, 0x48, 0xF3, 0x57, 0xA3, 0x6A, 0xA9,
         0x1E, 0x94, 0x78, 0xA9, 0xCD, 0xA8, 0x87, 0x00,
         0xBA, 0xB7, 0xC7, 0x0B, 0xBA, 0x3B, 0xB2, 0xC8,
         0x21, 0x0C, 0xFC, 0x08, 0x0B, 0x3B, 0x2C, 0x95},
        {0x6F, 0x4F, 0x57, 0x07, 0xDB, 0x41, 0x56, 0x75,
         0xB4, 0xFF, 0xED, 0x33, 0x85, 0xCD, 0x51, 0x91},
        {0xFE, 0x33, 0xC3, 0x3D, 0x8E, 0xE5, 0xEB, 0xD4,
         0xCB, 0x16, 0xBF, 0x00, 0x6F, 0x8E, 0x56, 0x1A},
    },
    {0, {}, {}}
};


//----------------------------------------------------------------------------
// Program entry point.
//----------------------------------------------------------------------------

int main(int argc, char* argv[])
{
    AES aes;
    ArmAES arm_aes;
    uint8_t plain[16];
    uint8_t cipher[16];

    std::cout << "sizeof(uint8x16_t) = " << sizeof(uint8x16_t) << " bytes" << std::endl;

    for (auto test = test_data; test->key_size > 0; ++test) {

        bzero(plain, sizeof(plain));
        bzero(cipher, sizeof(cipher));
        aes.setKey(test->key, test->key_size);
        aes.encrypt(test->plain, sizeof(test->plain), cipher, sizeof(cipher), nullptr);
        aes.decrypt(test->cipher, sizeof(test->cipher), plain, sizeof(plain), nullptr);
        const bool enc_ok = ::memcmp(cipher, test->cipher, sizeof(cipher)) == 0;
        const bool dec_ok = ::memcmp(plain, test->plain, sizeof(plain)) == 0;

        bzero(plain, sizeof(plain));
        bzero(cipher, sizeof(cipher));
        arm_aes.setKey(test->key, test->key_size);
        arm_aes.encrypt(test->plain, sizeof(test->plain), cipher, sizeof(cipher), nullptr);
        arm_aes.decrypt(test->cipher, sizeof(test->cipher), plain, sizeof(plain), nullptr);
        const bool arm_enc_ok = ::memcmp(cipher, test->cipher, sizeof(cipher)) == 0;
        const bool arm_dec_ok = ::memcmp(plain, test->plain, sizeof(plain)) == 0;

        std::cout << "Key: " << (test->key_size * 8)
                  << " bits, AES encrypt: " << (enc_ok ? "passed" : "FAILED")
                  << ", decrypt: " << (dec_ok ? "passed" : "FAILED")
                  << ", ArmAES encrypt: " << (arm_enc_ok ? "passed" : "FAILED")
                  << ", decrypt: " << (arm_dec_ok ? "passed" : "FAILED")
                  << std::endl;
    }

    return EXIT_SUCCESS;
}
